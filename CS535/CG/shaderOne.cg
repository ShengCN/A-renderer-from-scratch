
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
  float2 texCoord : TEXCOORD;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
  	float2 vtexCoord : TEXCOORD2;
};

struct PixelDataOutput {
	float4 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj,
  uniform float Mf) {

  VertexDataOutput ret;

  ret.projv = mul(modelViewProj, vdi.vertex);
  
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  ret.vtexCoord = vdi.texCoord;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}

// do gamma correction
const float gamma = 2.2;
float3 ToLinear(float3 color)
{
	return pow(color,gamma);
}

// -----------------------
// Global Variables:
// Ground plane (float)
// Box0, Box1, Box2 (float3)
// -----------------------
float groundPlaneH;
float roughness = 0.25;
float3 dcolor = float3(1.0);
float3 scolor = float3(0.23);
float LUT_SIZE  = 64.0;
float LUT_SCALE;
float LUT_BIAS;

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float t, out float2 uv)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u<0.0 || u > 1.0 || v < 0.0 || v > 1.0)
		return false;

	uv[0] = u;
	uv[1] = 1.0 - v;	// OpenGL uv 
	return true;
}

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float ot)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	float t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0)
	{
		return false;
	}

	ot = t;
	return true;
}

float3 IntegrateEdgeVec(float3 v1, float3 v2)
{
    float x = dot(v1, v2);
    float y = abs(x);

    float a = 0.8543985 + (0.4965155 + 0.0145206*y)*y;
    float b = 3.4175940 + (4.1616724 + y)*y;
    float v = a / b;

    float theta_sintheta = (x > 0.0) ? v : 0.5*inversesqrt(1.0 - x*x) - v;

    return cross(v1, v2)*theta_sintheta;
}

float IntegrateEdge(float3 v1, float3 v2)
{
	return IntegrateEdgeVec(v1, v2).z;
}

void ClipQuadToHorizon(inout float3 L[5], out int n)
{
	// detect clipping config
    int config = 0;
    if (L[0].z > 0.0) config += 1;
    if (L[1].z > 0.0) config += 2;
    if (L[2].z > 0.0) config += 4;
    if (L[3].z > 0.0) config += 8;

    // clip
    n = 0;

    if (config == 0)
    {
        // clip all
    }
    else if (config == 1) // V1 clip V2 V3 V4
    {
        n = 3;
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
        L[2] = -L[3].z * L[0] + L[0].z * L[3];
    }
    else if (config == 2) // V2 clip V1 V3 V4
    {
        n = 3;
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
    }
    else if (config == 3) // V1 V2 clip V3 V4
    {
        n = 4;
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
        L[3] = -L[3].z * L[0] + L[0].z * L[3];
    }
    else if (config == 4) // V3 clip V1 V2 V4
    {
        n = 3;
        L[0] = -L[3].z * L[2] + L[2].z * L[3];
        L[1] = -L[1].z * L[2] + L[2].z * L[1];
    }
    else if (config == 5) // V1 V3 clip V2 V4) impossible
    {
        n = 0;
    }
    else if (config == 6) // V2 V3 clip V1 V4
    {
        n = 4;
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
        L[3] = -L[3].z * L[2] + L[2].z * L[3];
    }
    else if (config == 7) // V1 V2 V3 clip V4
    {
        n = 5;
        L[4] = -L[3].z * L[0] + L[0].z * L[3];
        L[3] = -L[3].z * L[2] + L[2].z * L[3];
    }
    else if (config == 8) // V4 clip V1 V2 V3
    {
        n = 3;
        L[0] = -L[0].z * L[3] + L[3].z * L[0];
        L[1] = -L[2].z * L[3] + L[3].z * L[2];
        L[2] =  L[3];
    }
    else if (config == 9) // V1 V4 clip V2 V3
    {
        n = 4;
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
        L[2] = -L[2].z * L[3] + L[3].z * L[2];
    }
    else if (config == 10) // V2 V4 clip V1 V3) impossible
    {
        n = 0;
    }
    else if (config == 11) // V1 V2 V4 clip V3
    {
        n = 5;
        L[4] = L[3];
        L[3] = -L[2].z * L[3] + L[3].z * L[2];
        L[2] = -L[2].z * L[1] + L[1].z * L[2];
    }
    else if (config == 12) // V3 V4 clip V1 V2
    {
        n = 4;
        L[1] = -L[1].z * L[2] + L[2].z * L[1];
        L[0] = -L[0].z * L[3] + L[3].z * L[0];
    }
    else if (config == 13) // V1 V3 V4 clip V2
    {
        n = 5;
        L[4] = L[3];
        L[3] = L[2];
        L[2] = -L[1].z * L[2] + L[2].z * L[1];
        L[1] = -L[1].z * L[0] + L[0].z * L[1];
    }
    else if (config == 14) // V2 V3 V4 clip V1
    {
        n = 5;
        L[4] = -L[0].z * L[3] + L[3].z * L[0];
        L[0] = -L[0].z * L[1] + L[1].z * L[0];
    }
    else if (config == 15) // V1 V2 V3 V4
    {
        n = 4;
    }
    
    if (n == 3)
        L[3] = L[0];
    if (n == 4)
        L[4] = L[0];
}

float3 LTC_Evaluate(float3 N, float3 V, float3 P, float3x3 Minv, float4x4 points, bool isTwoSided)
{
	// construct orthonomal basis around N
	float3 T1, T2;
	T1 = normalize(V - N * dot(V,N));
	T2 = cross(N, T1);

	Minv = mul(Minv, transpose(float3x3(T1, T2, N)));

	// polygon
	float3 L[5];
	L[0] = mul(Minv, points[0].xyz - P);
	L[1] = mul(Minv, points[1].xyz - P);
	L[2] = mul(Minv, points[2].xyz - P);
	L[3] = mul(Minv, points[3].xyz - P);

	float sum = 0.0;
	int n;
	ClipQuadToHorizon(L, n);

	if(n == 0)
		return float3(0.0);

	L[0] = normalize(L[0]);
	L[1] = normalize(L[1]);
	L[2] = normalize(L[2]);
	L[3] = normalize(L[3]);
	L[4] = normalize(L[4]);

	// integrate
	sum += IntegrateEdge(L[0], L[1]);
	sum += IntegrateEdge(L[1], L[2]);
	sum += IntegrateEdge(L[2], L[3]);
	if( n>= 4)
		sum += IntegrateEdge(L[3], L[4]);
	if( n == 5)
		sum += IntegrateEdge(L[4], L[0]);
	
	sum = isTwoSided ? abs(sum) : max(0.0, sum);

	return float3(sum);
}

PixelDataOutput FragmentMain(VertexDataOutput pdi, 
  uniform float3 ppc_C,
  uniform float groundHeight,	// hard coded 
  uniform int hasST,
  uniform int isCubemap,
  uniform int isGround,
  uniform float4x4 recPoints,
  uniform sampler2D tex,
  uniform sampler2D ltc_1,
  uniform sampler2D ltc_2,
  uniform samplerCUBE env) {

	// Pass in global variables
	groundPlaneH = groundHeight;
	LUT_SCALE = (LUT_SIZE - 1.0)/LUT_SIZE;
	LUT_BIAS  = 0.5/LUT_SIZE;

	PixelDataOutput ret;
	
	// floor normal
	float4 floorPlane = float4(0.0,1.0,0.0,0.0); 

	float3 col = float3(0.0);
	float3 pc = ToLinear(pdi.color);
	float alpha = 1.0;
	bool isTwoSided = false;

	if(isGround)
	{
		float3 pos = pdi.vxyz;
		float3 N = floorPlane.xyz;
		float3 V = normalize(ppc_C - pdi.vxyz);
		float ndotv = clamp(dot(N,V), 0.0, 1.0);
		float2 uv = float2(roughness, sqrt(1.0 - ndotv));
		uv = uv * LUT_SCALE + LUT_BIAS;

		float4 t1 = tex2D(ltc_1, uv);
		float4 t2 = tex2D(ltc_2, uv);

		float3x3 Minv = float3x3(
			float3(t1.x, 0, t1.y),
			float3(0, t1.z, 0),
			float3(t1.w, 0, t2.x));

		float3 spec = LTC_Evaluate(N, V, pos, Minv, recPoints, isTwoSided);
		spec *= scolor * t2.y + (1.0 - scolor) * t2.z;

		float3 diff = LTC_Evaluate(N, V, pos, float3x3(1), recPoints, isTwoSided); 

		col = float3(1.0) * (diff);
	}
	else
	{
		col = pc;
	}
	
  	ret.color = float4(clamp(col ,0.0,1.0),alpha);
  	return ret;
}
