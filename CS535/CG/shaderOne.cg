
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
  float2 texCoord : TEXCOORD;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
  	float2 vtexCoord : TEXCOORD2;
};

struct PixelDataOutput {
	float4 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj,
  uniform float Mf) {

  VertexDataOutput ret;

  ret.projv = mul(modelViewProj, vdi.vertex);
  
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  ret.vtexCoord = vdi.texCoord;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}

struct sixFaces{
	float3x3 face[6];
};

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float2 uv)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	float t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u<0.0 || u >1.0 || v < 0.0 || v > 1.0)
		return false;

	uv[0] = u;
	uv[1] = 1.0 - v;	// OpenGL uv 
	return true;
}

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float ot)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	float t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u<0.0 || u >1.0 || v < 0.0 || v > 1.0)
		return false;

	ot = t;
	return true;
}

sixFaces GetFaces(float4x4 box)
{
	float3 boxCorner = box[0].xyz;
	float3 boxX = box[1].xyz;
	float3 boxY = box[2].xyz;
	float3 boxZ = box[3].xyz;

	// each box has six faces
	sixFaces boxFace;
	// back
	boxFace.face[0] = float3x3(boxCorner, boxCorner + boxX, boxCorner + boxY);	
	// front
	boxFace.face[1] = float3x3(boxCorner + boxZ, boxCorner + boxX + boxZ, boxCorner + boxY + boxZ);	
	// top
	boxFace.face[2] = float3x3(boxCorner + boxY, boxCorner + boxY + boxZ, boxCorner + boxY + boxX);	
	// bot
	boxFace.face[3] = float3x3(boxCorner, boxCorner + boxZ, boxCorner + boxX);	
	// left
	boxFace.face[4] = float3x3(boxCorner, boxCorner + boxY, boxCorner + boxZ);	
	// right
	boxFace.face[5] = float3x3(boxCorner + boxX, boxCorner + boxY + boxX, boxCorner + boxZ + boxX);	
	return boxFace;
}

// Hard coded rectangle light
float SoftShadows(float3 lightPos, float3 curPos, float4x4 box0, float4x4 box1)
{
	sixFaces box0Faces, box1Faces;
	box0Faces = GetFaces(box0);
	box1Faces = GetFaces(box1);

	// light direction from light to curPos
	float3 rd = curPos - lightPos;	
	for(int i = 0; i < 6; ++i)
	{
		float t = 0;
		if(IntersectBB(box0Faces.face[i], curPos, rd, t))
		{
			if(t < 0.2f)
				return 0.0f;
		}
		
		if(IntersectBB(box1Faces.face[i], curPos, rd, t))
		{
			if(t < 0.2f)
				return 0.0f;
		}
	}
	return 1.0f;
}


PixelDataOutput FragmentMain(VertexDataOutput pdi, 
  uniform float3 light_position,
  uniform float3 ppc_C,
  uniform float4x4 box0,	// The other two boxes
  uniform float4x4 box1,
  uniform int hasST,
  uniform int isCubemap,
  uniform sampler2D tex,
  uniform samplerCUBE env) {


  PixelDataOutput ret;
  
  // Phong Lighting
  float3 viewdir = ppc_C - pdi.vxyz;
  float3 lightdir = light_position - pdi.vxyz;
  float ka = 0.2f;
  float kd = max(0.0f, dot(normalize(lightdir), normalize(pdi.normal)));
  float ks = 0.3 * pow(max(0.0f, dot(reflect(normalize(-lightdir),normalize(pdi.normal)) , normalize(viewdir))), 512);
  
  float3 pc = pdi.color;
  float alpha = 1.0;
  if(hasST > 0)
  {
	  float4 texColor = tex2D(tex, pdi.vtexCoord);
	  pc = texColor.rgb;
	  alpha = texColor.a;
  }
  else 
  {
	// float3 reflectDir = reflect(normalize(viewdir), normalize(pdi.normal));
	// float3 refractDir = refract(normalize(viewdir), normalize(pdi.normal), 1.0);
	// float4 envColor = texCUBE(env, refractDir);

	//   pc = 0.3;
	  alpha = 1.0;
  }

  	float3 phongColor =  pc * (ka + (1.0f - ka) * kd + ks);

	float shadowEffect = SoftShadows(light_position, pdi.vxyz, box0, box1);
	phongColor = shadowEffect * phongColor;

	if(isCubemap)
	{
		// phongColor = texCUBE(env, float3(pdi.vxyz.x,-pdi.vxyz.y,pdi.vxyz.z));
		phongColor = texCUBE(env, -pdi.vxyz);
		alpha =1.0;
	}
  	ret.color = float4(clamp(phongColor ,0.0,1.0),alpha);
  	return ret;

	// BILLBOARD REFLECTIONS

	// create reflected ray at this current pixel

	// eye ray is eye-3D surface point at this current pixel
	//		eye needs to be passed in as uniform float3
	//		3D surface point is provided by pdi.vxyz
	// normal is provided as pdi.normal
	// reflect eye ray over normal to get reflected ray

	// intersect reflected ray with billboards
	// if multiple intersections, keep closest one
	// if no intersections, lookup reflected ray in environment mapping
	// billboard is passed in as uniform parameter, e.g. float4x4
	// EXTRA CREDIT: environment mapping is a uniform input parameter "cube sampler or something like that"

	// SOFT SHADOWS CAST BY RECTANGULAR LIGHT SOURCE
	// for all light sample rows
	//		for all light samples in current row
	//			define light ray = light sample - 3D surface point
	//			intersect light ray with all box faces
	//			if no intersection, increment fragment light counter
}
