
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
  float2 texCoord : TEXCOORD;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
  	float2 vtexCoord : TEXCOORD2;
};

struct PixelDataOutput {
	float4 color : COLOR;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj,
  uniform float Mf) {

  VertexDataOutput ret;

  ret.projv = mul(modelViewProj, vdi.vertex);
  
  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  ret.vtexCoord = vdi.texCoord;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}

struct sixFaces{
	float3x3 face[6];
};

// -----------------------
// Global Variables:
// Ground plane (float)
// Box0, Box1, Box2 (float3)
// -----------------------
float groundPlaneH;
float4x4 gb_box0, gb_box1, gb_box2;
float3 gb_box0_color, gb_box1_color, gb_box2_color;
sampler2D texture;

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float t, out float2 uv)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u<0.0 || u > 1.0 || v < 0.0 || v > 1.0)
		return false;

	// texture not solid
	if(tex2D(texture, float2(u , v)).r > 0.5)
		return false;

	uv[0] = u;
	uv[1] = 1.0 - v;	// OpenGL uv 
	return true;
}

bool IntersectBB(float3x3 bb, float3 ro, float3 rd, out float ot)
{
	// ray bb intersection
	float3 p0 = bb[0];
	float3 p1 = bb[1];
	float3 p2 = bb[2];
	float3 n = normalize(cross(p1-p0,p2-p0)); 
	float t = -dot(ro - p0,n)/dot(rd,n);
	float3 p = ro + t * rd - p0;
	float3 x = p2 - p0;
	float3 y = p1 - p0;
	float u = dot(p,normalize(x)) / length(x);
	float v = dot(p,normalize(y)) / length(y);
	
	// not intersect
	if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0)
	{
		return false;
	}

	// texture not solid
	if(tex2D(texture, float2(u,v)).r > 0.0)
		return false;

	ot = t;
	return true;
}

sixFaces GetFaces(float4x4 box)
{
	float3 boxCorner = box[0].xyz;
	float3 boxX = box[1].xyz;
	float3 boxY = box[2].xyz;
	float3 boxZ = box[3].xyz;

	// each box has six faces
	sixFaces boxFace;
	// back
	boxFace.face[0] = float3x3(boxCorner, boxCorner + boxX, boxCorner + boxY);	
	// front
	boxFace.face[1] = float3x3(boxCorner + boxZ, boxCorner + boxX + boxZ, boxCorner + boxY + boxZ);	
	// top
	boxFace.face[2] = float3x3(boxCorner + boxY, boxCorner + boxY + boxZ, boxCorner + boxY + boxX);	
	// bot
	boxFace.face[3] = float3x3(boxCorner, boxCorner + boxZ, boxCorner + boxX);	
	// left
	boxFace.face[4] = float3x3(boxCorner, boxCorner + boxY, boxCorner + boxZ);	
	// right
	boxFace.face[5] = float3x3(boxCorner + boxX, boxCorner + boxY + boxX, boxCorner + boxZ + boxX);	
	return boxFace;
}

// maping the closest visible point in the scene from ro and rd
void map(float3 ro, float3 rd, out float t, out float3 color)
{
	sixFaces box0Faces, box1Faces, box2Faces;
	box0Faces = GetFaces(gb_box0);
	box1Faces = GetFaces(gb_box1);
	box2Faces = GetFaces(gb_box2);

	// ground
	t = (groundPlaneH - ro.y) / rd.y;
	color = 0.75;
	float eps = 1e-2;

	for(int i = 0; i < 6; ++i)
	{
		float tmpT;
		if(IntersectBB(box0Faces.face[i], ro, rd, tmpT))
		{
			if(tmpT > 0.0 && tmpT < t && tmpT > eps)
			{
				t = tmpT;
				color = gb_box0_color;
			}
		}
		
		if(IntersectBB(box1Faces.face[i], ro, rd, tmpT))
		{
			if(tmpT > 0.0 && tmpT < t && tmpT > eps)
			{
				t = tmpT;
				color = gb_box1_color;
			}
		}

		if(IntersectBB(box2Faces.face[i], ro, rd, tmpT))
		{
			if(tmpT > 0.0 && tmpT < t && tmpT > eps)
			{
				t = tmpT;
				color = gb_box2_color;
			}
		}
	}
}

// Hard coded rectangle light
float PointLightSoftShadow(float3 lightPos, float3 curPos)
{
	sixFaces box0Faces, box1Faces, box2Faces;
	box0Faces = GetFaces(gb_box0);
	box1Faces = GetFaces(gb_box1);
	box2Faces = GetFaces(gb_box2);

	// light direction from light to curPos
	float3 rd = curPos - lightPos;	
	for(int i = 0; i < 6; ++i)
	{
		float t = 0;
		float eps = 1e-6;
		if(IntersectBB(box0Faces.face[i], curPos - rd * eps, rd, t))
		{
			if(length(curPos + rd * t - lightPos) < length(lightPos - curPos))
				return 0.0f;
		}
		
		if(IntersectBB(box1Faces.face[i], curPos - rd * eps, rd, t))
		{
			if(length(curPos + rd * t - lightPos) < length(lightPos - curPos))
				return 0.0f;
		}

		if(IntersectBB(box2Faces.face[i], curPos - rd * eps, rd, t))
		{
			if(length(curPos + rd * t - lightPos) < length(lightPos - curPos))
				return 0.0f;
		}
	}

	return 1.0f;
}

float RectLightSoftShadow(float3 lightPos, float3 curPos)
{
	// Assumption: axis aligned with x and z axis
	float3 dx = float3(1.0, 0.0, 0.0) * 2.0;
	float3 dz = float3(0.0, 0.0, 1.0) * 2.0;
	
	// 16 x 16 samples
	float shadowEffect = 0.0;
	int samples = 16;
	for(int r = 0; r < samples; ++r)
	{
		for(int c = 0; c < samples; ++c)
		{
			// light position vector
			float3 lpv = dx * r + dz * c;
			float3 curLightPos = lightPos + lpv;
			shadowEffect += PointLightSoftShadow(curLightPos, curPos);
		}
	}
	return shadowEffect / ((float)samples * (float)samples);
}

PixelDataOutput FragmentMain(VertexDataOutput pdi, 
  uniform float3 light_position,
  uniform float3 ppc_C,
  uniform float4x4 box0,	// three boxes
  uniform float4x4 box1,
  uniform float4x4 box2,
  uniform float3 box0Color,
  uniform float3 box1Color,
  uniform float3 box2Color,
  uniform float groundHeight,	// hard coded 
  uniform int hasST,
  uniform int isCubemap,
  uniform int isGround,
  uniform sampler2D tex,
  uniform sampler2D topTex,
  uniform sampler2D sideTex,
  uniform samplerCUBE env) {

  // Pass in global variables
  groundPlaneH = groundHeight;
  gb_box0 = box0; 
  gb_box1 = box1;
  gb_box2 = box2;
  texture = topTex;
  gb_box0_color = box0Color;
  gb_box1_color = box1Color;
  gb_box2_color = box2Color;

  PixelDataOutput ret;
  
  // Phong Lighting
  float3 viewdir = ppc_C - pdi.vxyz;
  float3 lightdir = light_position - pdi.vxyz;
  float ka = 0.3f;
  float kd = max(0.0f, dot(normalize(lightdir), isGround?float3(0.0,1.0,0.0):normalize(pdi.normal)));
  // float ks = 0.3 * pow(max(0.0f, dot(reflect(normalize(-lightdir),normalize(pdi.normal)) , normalize(viewdir))), 512);
  
  float3 pc = pdi.color;
  float alpha = 1.0;
  if(hasST > 0)
  {
	  float4 texColor = tex2D(topTex, pdi.vtexCoord);

	  if(texColor.r > 0.0)
	  {
		  float3 ro = pdi.vxyz;
		  float3 rd = pdi.vxyz - ppc_C;
		  float t;
		  float3 color;
		  map(ro, rd, t, color);
		  pc = color;
		  
		  // if it is ground
		  // recalculate the ground shading color
		  if(length(color - 0.75) < 1e-4)
		  {
			  ro = ro + rd * t;
			  kd = max(0.0, dot(normalize(light_position - ro), float3(0.0,1.0,0.0)));
			  float ksd = RectLightSoftShadow(light_position, ro);
			  pc = ksd * pc;
		  }		  
	  }

	  alpha = 1.0;
  }
  else 
  {
	// float3 reflectDir = reflect(normalize(viewdir), normalize(pdi.normal));
	// float3 refractDir = refract(normalize(viewdir), normalize(pdi.normal), 1.0);
	// float4 envColor = texCUBE(env, refractDir);

	  // pc = tex2D(topTex, pdi.vtexCoord);
	  // pc = length(pdi.vtexCoord);
	  alpha = 1.0;
  }

  	float3 phongColor =  pc * (ka + (1.0f - ka) * kd);
	
	float shadowEffect = tex2D(tex, pdi.vtexCoord).r <0.9? RectLightSoftShadow(light_position, pdi.vxyz) : 1.0;
	
	phongColor = shadowEffect * phongColor;

	if(isCubemap)
	{
		// phongColor = texCUBE(env, float3(pdi.vxyz.x,-pdi.vxyz.y,pdi.vxyz.z));
		phongColor = texCUBE(env, -pdi.vxyz).rgb;
		alpha =1.0;
	}
  	ret.color = float4(clamp(phongColor ,0.0,1.0),alpha);
  	return ret;
}
